
import scipy.stats as stats
import numpy as np

def task1():
    """Известно, что генеральная совокупность распределена нормально со средним квадратическим отклонением, равным 16.
    Найти доверительный интервал для оценки математического ожидания a с надежностью 0.95, 
    если выборочная средняя M = 80, а объем выборки n = 256."""
    x = 80
    n = 256
    sigma = 16
    Zt = stats.norm.ppf(0.975)
    
    left = x - Zt*sigma/np.sqrt(n)
    right = x + Zt*sigma/np.sqrt(n)
    
    print(f'доверительный интервал: [{left:.2f}; {right:.2f}].')


def task2():
    """В результате 10 независимых измерений некоторой величины X, 
    выполненных с одинаковой точностью, получены опытные данные: 6.9, 6.1, 6.2, 6.8, 7.5, 6.3, 6.4, 6.9, 6.7, 6.1
    Предполагая, что результаты измерений подчинены нормальному закону распределения вероятностей, 
    оценить истинное значение величины X при помощи доверительного интервала,
    покрывающего это значение с доверительной вероятностью 0,95."""
    a = np.array([6.9, 6.1, 6.2, 6.8, 7.5, 6.3, 6.4, 6.9, 6.7, 6.1])
    n = len(a) #длина 
    x = np.mean(a) #среднее арифметическое
    D = np.var(a, ddof=1) #несмещенная дисперсия выборки a
    
    #доверительный интервал для среднего
    t = stats.t.ppf(0.975, n-1)
    
    left = x - t*np.sqrt(D/n)
    right = x + t*np.sqrt(D/n)
    
    print(f'доверительный интервал: [{left:.4f}; {right:.4f}].')


def task3():
    """Рост дочерей 175, 167, 154, 174, 178, 148, 160, 167, 169, 170
    Рост матерей  178, 165, 165, 173, 168, 155, 160, 164, 178, 175
    Используя эти данные построить 95% доверительный интервал для разности среднего роста родителей и детей."""
    a = np.array([175, 167, 154, 174, 178, 148, 160, 167, 169, 170])
    b = np.array([178, 165, 165, 173, 168, 155, 160, 164, 178, 175])
    n = 10 #длина выборок

    #среднее арифметическое выборок
    x1 = np.mean(a)
    x2 = np.mean(b)
    
    #разность средних
    delta = x1 - x2
    
    #несмещенная дисперсия выборки a
    D1 = np.var(a, ddof=1)
    #несмещенная дисперсия выборки b
    D2 = np.var(b, ddof=1)
    #обьединенная оценка дисперсии
    D = (D1+D2)/2
    
    #стандартная ощибка разности средних
    SE = np.sqrt(D/n+D/n)

    t = stats.t.ppf(0.975, 2*(n-1))

    left = delta - t*SE
    right = delta + t*SE
    
    print(f'доверительный интервал: [{left:.4f}; {right:.4f}].')

task3()
